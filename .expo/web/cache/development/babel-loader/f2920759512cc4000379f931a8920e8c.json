{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nexport default function useWindowDimensions() {\n  var _React$useState = React.useState(function () {\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    return {\n      height: height,\n      width: width\n    };\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    var onChange = function onChange(_ref) {\n      var window = _ref.window;\n      var width = window.width,\n          height = window.height;\n      setDimensions(function (d) {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return {\n          width: width,\n          height: height\n        };\n      });\n    };\n\n    onChange({\n      window: Dimensions.get('window')\n    });\n    Dimensions.addEventListener('change', onChange);\n    return function () {\n      return Dimensions.removeEventListener('change', onChange);\n    };\n  }, []);\n  return dimensions;\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAKA,eAAe,SAASC,mBAAT,GAA+B;EAC5C,sBAAoCD,KAAK,CAACE,QAANF,CAAe,YAAM;IAEvD,sBAAkCG,UAAU,CAACC,GAAXD,CAAe,QAAfA,CAAlC;IAAA,4CAAQE,MAAR;IAAA,IAAQA,MAAR,sCAAiB,CAAjB;IAAA,4CAAoBC,KAApB;IAAA,IAAoBA,KAApB,sCAA4B,CAA5B;;IAEA,OAAO;MAAED,MAAF,EAAEA,MAAF;MAAUC;IAAV,CAAP;EAJkC,EAApC;EAAA;EAAA,IAAOC,UAAP;EAAA,IAAmBC,aAAnB;;EAOAR,KAAK,CAACS,SAANT,CAAgB,YAAM;IACpB,IAAMU,QAAQ,GAAG,SAAXA,QAAW,OAAwC;MAAA,IAArCC,MAAqC,QAArCA,MAAqC;MACvD,IAAQL,KAAR,GAA0BK,MAA1B,CAAQL,KAAR;MAAA,IAAeD,MAAf,GAA0BM,MAA1B,CAAeN,MAAf;MAEAG,aAAa,CAAEI,WAAD,EAAO;QACnB,IAAIN,KAAK,KAAKM,CAAC,CAACN,KAAZA,IAAqBD,MAAM,KAAKO,CAAC,CAACP,MAAtC,EAA8C;UAC5C,OAAOO,CAAP;QACD;;QAED,OAAO;UAAEN,KAAF,EAAEA,KAAF;UAASD;QAAT,CAAP;MALW,EAAbG;IAHF;;IAcAE,QAAQ,CAAC;MAAEC,MAAM,EAAER,UAAU,CAACC,GAAXD,CAAe,QAAfA;IAAV,CAAD,CAARO;IAEAP,UAAU,CAACU,gBAAXV,CAA4B,QAA5BA,EAAsCO,QAAtCP;IAEA,OAAO;MAAA,OAAMA,UAAU,CAACW,mBAAXX,CAA+B,QAA/BA,EAAyCO,QAAzCP,CAAN;IAAA,CAAP;EAnBF,GAoBG,EApBHH;EAsBA,OAAOO,UAAP;AACD","names":["React","useWindowDimensions","useState","Dimensions","get","height","width","dimensions","setDimensions","useEffect","onChange","window","d","addEventListener","removeEventListener"],"sources":["useWindowDimensions.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"module"}