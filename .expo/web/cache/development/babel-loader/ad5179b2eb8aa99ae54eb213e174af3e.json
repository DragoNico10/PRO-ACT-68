{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"visible\", \"size\", \"children\", \"style\"],\n    _excluded2 = [\"backgroundColor\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { useTheme } from '@react-navigation/native';\nexport default function Badge(_ref) {\n  var _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 18 : _ref$size,\n      children = _ref.children,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(function () {\n    return new Animated.Value(visible ? 1 : 0);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      opacity = _React$useState2[0];\n\n  var _React$useState3 = React.useState(visible ? true : false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      rendered = _React$useState4[0],\n      setRendered = _React$useState4[1];\n\n  var theme = useTheme();\n  React.useEffect(function () {\n    if (!rendered) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true\n    }).start(function (_ref2) {\n      var finished = _ref2.finished;\n\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n  }, [opacity, rendered, visible]);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  if (!visible && !rendered) {\n    return null;\n  }\n\n  var _ref3 = StyleSheet.flatten(style) || {},\n      _ref3$backgroundColor = _ref3.backgroundColor,\n      backgroundColor = _ref3$backgroundColor === void 0 ? theme.colors.notification : _ref3$backgroundColor,\n      restStyle = _objectWithoutProperties(_ref3, _excluded2);\n\n  var textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n  var borderRadius = size / 2;\n  var fontSize = Math.floor(size * 3 / 4);\n  return React.createElement(Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [{\n      opacity: opacity,\n      transform: [{\n        scale: opacity.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        })\n      }],\n      backgroundColor: backgroundColor,\n      color: textColor,\n      fontSize: fontSize,\n      lineHeight: size - 1,\n      height: size,\n      minWidth: size,\n      borderRadius: borderRadius\n    }, styles.container, restStyle]\n  }, rest), children);\n}\nvar styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","color","useTheme","Badge","visible","size","children","style","rest","useState","Animated","Value","opacity","rendered","setRendered","theme","useEffect","timing","toValue","duration","useNativeDriver","start","finished","StyleSheet","flatten","backgroundColor","colors","notification","restStyle","textColor","isLight","borderRadius","fontSize","Math","floor","Text","numberOfLines","transform","scale","interpolate","inputRange","outputRange","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","paddingHorizontal","overflow"],"sources":["Badge.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { useTheme } from '@react-navigation/native';\n\ntype Props = {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  /**\n   * Style object for the tab bar container.\n   */\n  style?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n};\n\nexport default function Badge({\n  visible = true,\n  size = 18,\n  children,\n  style,\n  ...rest\n}: Props) {\n  const [opacity] = React.useState(() => new Animated.Value(visible ? 1 : 0));\n  const [rendered, setRendered] = React.useState(visible ? true : false);\n\n  const theme = useTheme();\n\n  React.useEffect(() => {\n    if (!rendered) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n  }, [opacity, rendered, visible]);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  if (!visible && !rendered) {\n    return null;\n  }\n\n  // @ts-expect-error: backgroundColor definitely exists\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n\n  const borderRadius = size / 2;\n  const fontSize = Math.floor((size * 3) / 4);\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          transform: [\n            {\n              scale: opacity.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0.5, 1],\n              }),\n            },\n          ],\n          backgroundColor,\n          color: textColor,\n          fontSize,\n          lineHeight: size - 1,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}